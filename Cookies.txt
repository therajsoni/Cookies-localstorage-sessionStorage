To work with cookies, JavaScript doesn't 
have built-in methods like localStorage or sessionStorage
You can manage cookies by creating custom functions:



// Step 1: Set a cookie with an expiration date
function setCookie(name, value, days) {
  let expires = "";
  if (days) {
    let date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); // Convert days to milliseconds
    expires = "; expires=" + date.toUTCString();
  }
  document.cookie = name + "=" + (value || "") + expires + "; path=/";
}

// Step 2: Get a cookie
function getCookie(name) {
  let nameEQ = name + "=";
  let ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') c = c.substring(1, c.length); // Trim whitespace
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
}

// Step 3: Delete a cookie
function deleteCookie(name) {
  document.cookie = name + '=; Max-Age=-99999999;';
}

// Using the functions
setCookie('user', 'JaneDoe', 7); // Set 'user' cookie for 7 days
let user = getCookie('user');     // Retrieve 'user' cookie
console.log(user);                // Output: JaneDoe
deleteCookie('user');             // Delete 'user' cookie


Explanation:

setCookie: Sets a cookie with a name, value, and optional
 expiration in days.

getCookie: Retrieves a cookie value by name.

deleteCookie: Deletes a cookie by setting its expiration 
to the past.



How to use:
Store data in cookies when you want to share it between client and 
server or have more control over its expiration